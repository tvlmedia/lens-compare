

/* ========== Algemene reset ========== */
* {
  -webkit-user-drag: none;
  user-select: none;
  box-sizing: border-box;
}

html, body {
  margin: 0;
  padding: 0;
  max-width: 100vw;
  overflow-x: hidden;
  background: #0f0f0f;
  color: white;
  font-family: Arial, sans-serif;
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 14px;
  line-height: 1.6;
}

/* ========== Controls bovenaan ========== */
.controls {
  margin: 20px;
  display: flex;
  gap: 10px;
  flex-wrap: wrap;
  justify-content: center;
  padding: 0 16px;
}

select,
#toggleButton,
#fullscreenButton,
#downloadPdfButton {
  padding: 6px 12px;
  background: #1a1a1a;
  color: white;
  border: 1px solid #444;
  border-radius: 4px;
  font-size: 14px;
  cursor: pointer;
}

select:hover,
#toggleButton:hover,
#fullscreenButton:hover,
#downloadPdfButton:hover {
  background: #666;
  border-color: #666;
}

/* ========== Wrapper en sliderstructuur ========== */
#comparisonWrapper {
  width: 100%;
  max-width: 960px;
  aspect-ratio: 16 / 9;
  position: relative;
  background: black;
  overflow: hidden;
}

#beforeImage,
#afterImage {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

#beforeImage img,
#afterImage img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center center;
  position: absolute;
  inset: 0;
}

/* ========== AFTER WRAPPER voor split ========== */
#afterWrapper {
  position: absolute;
  top: 0;
  left: 0;
  width: 50%;
  height: 100%;
  overflow: hidden;
  z-index: 2;
  pointer-events: none;
}

#afterWrapper #afterImage {
  position: absolute;
  top: 0;
  left: 0;
  width: 960px;
  height: 540px;
}

#afterWrapper #afterImage img {
  width: 960px;
  height: 540px;
  object-fit: cover;
  object-position: center center;
}

/* ========== Slider lijn ========== */
#slider {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 4px;
  background: white;
  cursor: ew-resize;
  z-index: 10;
}

/* ========== Labels onderin ========== */
#infoContainer {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  width: 100%;
  max-width: 960px;
  margin-top: 12px;
  padding: 0 16px;
  font-size: 16px;
  color: #eee;
}

#leftLabel,
#rightLabel {
  width: 48%;
  text-align: center;
  white-space: normal;
  overflow-wrap: break-word;
  word-break: break-word;
}

/* ========== Extra uitlegtekst ========== */
#explanationBox {
  margin-top: 12px;
  max-width: 960px;
  font-size: 13px;
  color: #aaa;
  padding: 12px 16px;
  background: #1a1a1a;
  border-left: 4px solid orange;
  border-radius: 6px;
  line-height: 1.5;
}

/* ========== Fullscreen ========== */
:fullscreen #comparisonWrapper,
:-webkit-full-screen #comparisonWrapper {
  width: 100vw;
  height: 100vh;
  max-width: none;
  max-height: none;
}

:fullscreen #afterWrapper,
:-webkit-full-screen #afterWrapper {
  width: 50%;
  height: 100%;
  overflow: hidden;
}

:fullscreen #afterWrapper #afterImage,
:-webkit-full-screen #afterWrapper #afterImage {
  width: 100vw;
  height: 100vh;
}

:fullscreen #afterWrapper #afterImage img,
:-webkit-full-screen #afterWrapper #afterImage img {
  width: 100vw;
  height: 100vh;
  object-fit: cover;
  object-position: center center;
}

/* ========== Print ========== */
@media print {
  body {
    background: white !important;
    color: black !important;
  }

  .controls,
  #explanationBox {
    display: none !important;
  }

  #comparisonWrapper {
    width: 100% !important;
    height: auto !important;
    aspect-ratio: auto !important;
  }

  #infoContainer {
    color: black !important;
  }

  #comparisonWrapper img {
    object-fit: contain !important;
  }
}

/* ========== Mobiele weergave ========== */
@media screen and (max-width: 767px) {
  #comparisonWrapper {
    width: 100vw;
    height: auto;
    aspect-ratio: 16 / 9;
  }

  #afterWrapper {
    width: 50vw;
  }

  #afterWrapper #afterImage,
  #afterWrapper #afterImage img {
    width: 100vw;
    height: auto;
    object-fit: cover;
  }

  #infoContainer {
    flex-direction: column;
    align-items: center;
    font-size: 14px;
    text-align: center;
    width: 100%;
    padding: 0 12px;
  }

  #leftLabel,
  #rightLabel {
    width: 100%;
    margin: 4px 0;
    font-size: 13.5px;
    word-break: break-word;
    overflow-wrap: break-word;
  }

  #explanationBox {
    margin: 16px;
    font-size: 12.5px;
  }
}

@media screen and (max-width: 480px) {
  #infoContainer {
    font-size: 13px;
  }

  #leftLabel,
  #rightLabel {
    font-size: 12.5px;
    color: #ccc;
  }
}
@media screen and (max-width: 767px) {
  #fullscreenButton {
    display: none !important;
  }

  .controls {
    flex-direction: column;
    align-items: stretch;
  }

  .button-row,
  .select-row {
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    gap: 10px;
  }

  .button-row button,
  .select-row select {
    flex: 1;
    min-width: 120px;
    max-width: 200px;
  }
}


Dit het script


// ====== LENS COMPARISON TOOL SCRIPT (NETJES, FIXED PDF & UI) ======

const lenses = [
  "IronGlass Red P",
  "IronGlass Zeiss Jena",
  "DZO Vespid",
  "DZO Arles",
  "Cooke Panchro FF",
  "Lomo Standard Speed"
];

const notes = {
  "ironglass_red_p_35mm": "37mm",
  "ironglass_zeiss_jena_35mm": "35mm",
  "cooke_panchro_ff_25mm": "32mm"
};

const lensImageMap = {
  "ironglass_red_p_35mm_t2_8": "red_p_37mm_t2_8.jpg",
  "ironglass_zeiss_jena_35mm_t2_8": "zeiss_jena_35mm_t2_8.jpg",
  "ironglass_red_p_58mm_t2_8": "red_p_58mm_t2_8.jpg",
  "ironglass_zeiss_jena_50mm_t2_8": "zeiss_jena_50mm_t2_8.jpg"
};

const leftSelect = document.getElementById("leftLens");
const rightSelect = document.getElementById("rightLens");
const tStopSelect = document.getElementById("tStop");
const focalLengthSelect = document.getElementById("focalLength");
const beforeImgTag = document.getElementById("beforeImgTag");
const afterImgTag = document.getElementById("afterImgTag");
const afterWrapper = document.getElementById("afterWrapper");
const slider = document.getElementById("slider");
const comparisonWrapper = document.getElementById("comparisonWrapper");
const leftLabel = document.getElementById("leftLabel");
const rightLabel = document.getElementById("rightLabel");

lenses.forEach(lens => {
  leftSelect.add(new Option(lens, lens));
  rightSelect.add(new Option(lens, lens));
});

function updateImages() {
  const leftLens = leftSelect.value.toLowerCase().replace(/\s+/g, "_");
  const rightLens = rightSelect.value.toLowerCase().replace(/\s+/g, "_");
  const tStop = tStopSelect.value.replace(".", "_");
  const focalLength = focalLengthSelect.value;

  const leftBaseKey = `${leftLens}_${focalLength}`;
  const rightBaseKey = `${rightLens}_${focalLength}`;
  const leftKey = `${leftLens}_${focalLength}_t${tStop}`;
  const rightKey = `${rightLens}_${focalLength}_t${tStop}`;

  const imgLeft = `images/${lensImageMap[leftKey] || leftKey + ".jpg"}`;
  const imgRight = `images/${lensImageMap[rightKey] || rightKey + ".jpg"}`;

  beforeImgTag.src = imgRight;
  afterImgTag.src = imgLeft;

  const tStopFormatted = `T${tStopSelect.value}`;

  leftLabel.textContent = `Lens: ${leftSelect.value} ${notes[leftBaseKey] || focalLength} ${tStopFormatted}`;
  rightLabel.textContent = `Lens: ${rightSelect.value} ${notes[rightBaseKey] || focalLength} ${tStopFormatted}`;
}

[leftSelect, rightSelect, tStopSelect, focalLengthSelect].forEach(el =>
  el.addEventListener("change", updateImages)
);

leftSelect.value = "IronGlass Red P";
rightSelect.value = "IronGlass Zeiss Jena";
tStopSelect.value = "2.8";
focalLengthSelect.value = "35mm";
updateImages();

let isDragging = false;
slider.addEventListener("mousedown", () => isDragging = true);
window.addEventListener("mouseup", () => isDragging = false);
window.addEventListener("mousemove", e => {
  if (!isDragging) return;
  const rect = comparisonWrapper.getBoundingClientRect();
  const offset = Math.max(0, Math.min(e.clientX - rect.left, rect.width));
  const percent = (offset / rect.width) * 100;
  afterWrapper.style.width = `${percent}%`;
  slider.style.left = `${percent}%`;
});

document.getElementById("toggleButton").addEventListener("click", () => {
  const left = leftSelect.value;
  const right = rightSelect.value;
  leftSelect.value = right;
  rightSelect.value = left;
  updateImages();
});

document.getElementById("fullscreenButton").addEventListener("click", () => {
  const wrapper = document.getElementById("comparisonWrapper");
  if (!document.fullscreenElement && !document.webkitFullscreenElement) {
    wrapper.requestFullscreen?.() || wrapper.webkitRequestFullscreen?.();
  } else {
    document.exitFullscreen?.() || document.webkitExitFullscreen?.();
  }
});

document.getElementById("downloadPdfButton").addEventListener("click", async () => {
  const { jsPDF } = window.jspdf;
  const comparison = document.getElementById("comparisonWrapper");
  const leftImg = afterImgTag;
  const rightImg = beforeImgTag;
  const leftText = leftLabel.textContent;
  const rightText = rightLabel.textContent;

  const left = leftSelect.value;
  const right = rightSelect.value;
  const focal = focalLengthSelect.value;
  const t = tStopSelect.value;

  const pdf = new jsPDF({ orientation: "landscape", unit: "px", format: "a4" });
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();

  const logoUrl = "https://tvlmedia.github.io/lens-compare/LOGOVOORPDF.png";
  const logoImg = await loadImage(logoUrl);

  const lensDescriptions = {
    "IronGlass Red P": {
      text: "De IronGlass RED P set is een zeldzame vondst: bestaande uit de alleroudste series Sovjet-lenzen met single coating en maximale karakterweergave. Geen tweaks, geen trucjes – puur vintage glasoptiek.",
      url: "https://tvlrental.nl/ironglassredp/"
    },
    "IronGlass Zeiss Jena": {
      text: "De Zeiss Jena’s zijn een uitstekende keuze voor cinematografen die zoeken naar een zachte vintage signatuur zonder zware distortie of gekke flares. Ze voegen karakter toe, maar laten de huid spreken.",
      url: "https://tvlrental.nl/ironglasszeissjena/"
    }
  };

  async function renderImage(imgEl) {
    const canvas = document.createElement("canvas");
    canvas.width = imgEl.naturalWidth || 1920;
    canvas.height = imgEl.naturalHeight || 1080;
    const ctx = canvas.getContext("2d");
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.src = imgEl.src;
    await new Promise(resolve => img.onload = resolve);
    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
    return canvas.toDataURL("image/jpeg", 1.0);
  }

  async function drawFullWidth(imgData, yOffset = 0) {
    const img = new Image();
    img.src = imgData;
    await new Promise(resolve => img.onload = resolve);
    const aspect = img.width / img.height;
    const h = pageWidth / aspect;
    pdf.addImage(imgData, "JPEG", 0, yOffset, pageWidth, h);
    return h;
  }

  function drawTopLabel(text) {
    const barHeight = 20;
    pdf.setFillColor(0, 0, 0);
    pdf.rect(0, 0, pageWidth, barHeight, "F");
    pdf.setFontSize(12);
    pdf.setTextColor(255, 255, 255);
    pdf.text(text, pageWidth / 2, 14, { align: "center" });
  }

  function drawLogoBottomRight() {
    const maxWidth = 90;
    const ratio = logoImg.width / logoImg.height;
    const height = maxWidth / ratio;
    const x = pageWidth - maxWidth - 10;
    const y = pageHeight - height - 10;
    pdf.addImage(logoImg, "PNG", x, y, maxWidth, height);
  }

  function drawDescription(lens) {
    const info = lensDescriptions[lens];
    if (!info) return;

    const boxHeight = 70;
    const margin = 20;
    const logoSafeRight = 70;

    pdf.setFillColor(0, 0, 0);
    pdf.rect(0, pageHeight - boxHeight, pageWidth, boxHeight, "F");

    const safeTextWidth = pageWidth - margin * 2 - logoSafeRight;
    const lines = pdf.splitTextToSize(info.text, safeTextWidth);

    pdf.setFontSize(10);
    pdf.setTextColor(255, 255, 255);
    pdf.text(lines, margin, pageHeight - boxHeight + 20);

    pdf.setTextColor(80, 160, 255);
    pdf.textWithLink("Klik hier voor meer info", margin, pageHeight - 15, { url: info.url });
  }

  function fillBlack() {
    pdf.setFillColor(0, 0, 0);
    pdf.rect(0, 0, pageWidth, pageHeight, "F");
  }

  const splitCanvas = await html2canvas(comparison, { scale: 2, useCORS: true });
  const splitData = splitCanvas.toDataURL("image/jpeg", 1.0);
  const leftData = await renderImage(leftImg);
  const rightData = await renderImage(rightImg);

  // Page 1
  fillBlack();
  await drawFullWidth(splitData, 40);
  drawTopLabel(`${leftText}  vs  ${rightText}`);
  drawLogoBottomRight();
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(10);
  pdf.text("tvlrental.nl", pageWidth / 2, pageHeight - 15, { align: "center" });

  // Page 2
  pdf.addPage();
  fillBlack();
  await drawFullWidth(leftData, 40);
  drawTopLabel(leftText);
  drawDescription(left);
  drawLogoBottomRight();

  // Page 3
  pdf.addPage();
  fillBlack();
  await drawFullWidth(rightData, 40);
  drawTopLabel(rightText);
  drawDescription(right);
  drawLogoBottomRight();

  const safeLeft = left.replace(/\s+/g, "");
  const safeRight = right.replace(/\s+/g, "");
  const filename = `TVL_Rental_Lens_Comparison_${safeLeft}_${safeRight}_${focal}_T${t}.pdf`;
  pdf.save(filename);
});

async function loadImage(url) {
  return new Promise(resolve => {
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.onload = () => resolve(img);
    img.src = url;
  });
}



Dit de Index

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Lens Comparison</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="style.css">
</head>
<body>

  <!-- === Controls === -->
  <div class="controls">
    <button id="toggleButton">↔ Flip</button>
    <button id="fullscreenButton">⛶ Fullscreen</button>
    <button id="downloadPdfButton">⤓ Download PDF</button>

    <select id="leftLens"></select>
    <select id="rightLens"></select>

    <select id="tStop">
      <option value="1.4">T1.4</option>
      <option value="2">T2</option>
      <option value="2.8" selected>T2.8</option>
      <option value="4">T4</option>
      <option value="5.6">T5.6</option>
      <option value="8">T8</option>
    </select>

    <select id="focalLength">
      <option value="18mm">18mm</option>
      <option value="25mm">25mm</option>
      <option value="35mm" selected>35mm</option>
      <option value="50mm">50mm</option>
      <option value="80mm">80mm</option>
      <option value="135mm">135mm</option>
    </select>
  </div>

  <!-- === Comparison Area === -->
  <div id="comparisonWrapper">
    <div id="beforeImage">
      <img id="beforeImgTag" alt="Right lens preview">
    </div>

    <div id="afterWrapper">
      <div id="afterImage">
        <img id="afterImgTag" alt="Left lens preview">
      </div>
    </div>

    <div id="slider"></div>
  </div>

  <!-- === Lens Labels === -->
  <div id="infoContainer">
    <div id="leftLabel"></div>
    <div id="rightLabel"></div>
  </div>

  <!-- === Explanation Box === -->
  <div id="explanationBox">
    <p>⚠️ Let op: sommige lenzen zijn visueel gematcht. Als je bijvoorbeeld 35mm kiest, zie je soms een lens van 32 of 37mm die op 35mm lijkt qua field of view. Dit is om een eerlijke vergelijking te bieden.</p>
  </div>

  <!-- === External Scripts (Correct Order) === -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script>
    // Fix jsPDF global (nodig voor sommige browsers)
    window.jspdf = window.jspdf || window.jspdf;
  </script>
  <script src="script.js"></script>

</body>
</html>
